3dev/oskarjohansson/domain/service/AuthorServiceTestrdev/oskarjohansson/domain/service/AuthorServiceTest$Test that save does not throw error if author does not exist$1rdev/oskarjohansson/domain/service/AuthorServiceTest$Test that save does not throw error if author does not exist$2ëdev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthor saves a new author when author does not exist in the repository$1ëdev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthor saves a new author when author does not exist in the repository$2≠dev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthor saves a new author when author does not exist in the repository$$inlined$assertDoesNotThrow$1≠dev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthor saves a new author when author does not exist in the repository$$inlined$assertDoesNotThrow$2zdev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO throws error if no Author is found$1ñdev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO throws error if no Author is found$$inlined$assertDoesNotThrow$1ñdev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO throws error if no Author is found$$inlined$assertDoesNotThrow$2èdev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO returns a AuthorResponseDTO when called with one author$1ëdev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO returns a AuthorResponseDTO when called with many authors$1≠dev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO returns a AuthorResponseDTO when called with many authors$$inlined$assertDoesNotThrow$1≠dev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO returns a AuthorResponseDTO when called with many authors$$inlined$assertDoesNotThrow$2®dev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO returns a list of 2 object when called with a a list of 3 with 1 partial failure$1®dev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO returns a list of 2 object when called with a a list of 3 with 1 partial failure$2®dev/oskarjohansson/domain/service/AuthorServiceTest$test that createAuthorResponseDTO returns a list of 2 object when called with a a list of 3 with 1 partial failure$3ådev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthors create a new Author when no author is found in repository$1ådev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthors create a new Author when no author is found in repository$2∂dev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthors create one new Author when one author is found in repository and returns one author from repository$1∂dev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthors create one new Author when one author is found in repository and returns one author from repository$2∂dev/oskarjohansson/domain/service/AuthorServiceTest$test that getOrCreateAuthors create one new Author when one author is found in repository and returns one author from repository$3Fdev/oskarjohansson/domain/service/AuthorServiceTest$existingAuthor$1$1Fdev/oskarjohansson/domain/service/AuthorServiceTest$existingAuthor$1$21dev/oskarjohansson/domain/service/BookServiceTestddev/oskarjohansson/domain/service/BookServiceTest$Test that findBookByIdOrTitle returns book by Id$1gdev/oskarjohansson/domain/service/BookServiceTest$Test that findBookByIdOrTitle returns book by Title$1gdev/oskarjohansson/domain/service/BookServiceTest$Test that findBookByIdOrTitle returns book by Title$2qdev/oskarjohansson/domain/service/BookServiceTest$Test that findBookByIdOrTitle throws error when no book found$1qdev/oskarjohansson/domain/service/BookServiceTest$Test that findBookByIdOrTitle throws error when no book found$2ádev/oskarjohansson/domain/service/BookServiceTest$Test that findBookByIdOrTitle throws error when no book found$$inlined$assertThrows$1ãdev/oskarjohansson/domain/service/BookServiceTest$Test that validateAuthorExistenceInBook throws error when authorId is persisted in book$1°dev/oskarjohansson/domain/service/BookServiceTest$Test that validateAuthorExistenceInBook throws error when authorId is persisted in book$$inlined$assertThrows$14dev/oskarjohansson/domain/service/LibraryServiceTestÑdev/oskarjohansson/domain/service/LibraryServiceTest$assertDoesNotThrow that saveReview does not throw exception with valid inputs$1Ñdev/oskarjohansson/domain/service/LibraryServiceTest$assertDoesNotThrow that saveReview does not throw exception with valid inputs$2Ñdev/oskarjohansson/domain/service/LibraryServiceTest$assertDoesNotThrow that saveReview does not throw exception with valid inputs$3Ñdev/oskarjohansson/domain/service/LibraryServiceTest$assertDoesNotThrow that saveReview does not throw exception with valid inputs$4†dev/oskarjohansson/domain/service/LibraryServiceTest$assertDoesNotThrow that saveReview does not throw exception with valid inputs$$inlined$assertDoesNotThrow$1†dev/oskarjohansson/domain/service/LibraryServiceTest$assertDoesNotThrow that saveReview does not throw exception with valid inputs$$inlined$assertDoesNotThrow$2}dev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws exception when user has an existing review$1}dev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws exception when user has an existing review$2}dev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws exception when user has an existing review$3ìdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws exception when user has an existing review$$inlined$assertThrows$1ïdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when user already has registered a review$1ïdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when user already has registered a review$2ïdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when user already has registered a review$3´dev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when user already has registered a review$$inlined$assertThrows$1ñdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview does not throw IllegalArgumentException when user has no review registered$1ñdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview does not throw IllegalArgumentException when user has no review registered$2ñdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview does not throw IllegalArgumentException when user has no review registered$3ñdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview does not throw IllegalArgumentException when user has no review registered$4≤dev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview does not throw IllegalArgumentException when user has no review registered$$inlined$assertDoesNotThrow$1≤dev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview does not throw IllegalArgumentException when user has no review registered$$inlined$assertDoesNotThrow$2Çdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when Book is not found$1Çdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when Book is not found$2Çdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when Book is not found$3Çdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when Book is not found$4òdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException when Book is not found$$inlined$assertThrows$1Ödev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException review can't be persisted$1Ödev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException review can't be persisted$2Ödev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException review can't be persisted$3Ödev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException review can't be persisted$4õdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveReview throws IllegalArgumentException review can't be persisted$$inlined$assertThrows$1Ddev/oskarjohansson/domain/service/LibraryServiceTest$Test saveBook$1Ddev/oskarjohansson/domain/service/LibraryServiceTest$Test saveBook$2Ddev/oskarjohansson/domain/service/LibraryServiceTest$Test saveBook$3`dev/oskarjohansson/domain/service/LibraryServiceTest$Test saveBook$$inlined$assertDoesNotThrow$1`dev/oskarjohansson/domain/service/LibraryServiceTest$Test saveBook$$inlined$assertDoesNotThrow$2çdev/oskarjohansson/domain/service/LibraryServiceTest$test that save Author does not throw error when converting Author to AuthorResponseDTO$1çdev/oskarjohansson/domain/service/LibraryServiceTest$test that save Author does not throw error when converting Author to AuthorResponseDTO$2©dev/oskarjohansson/domain/service/LibraryServiceTest$test that save Author does not throw error when converting Author to AuthorResponseDTO$$inlined$assertDoesNotThrow$1©dev/oskarjohansson/domain/service/LibraryServiceTest$test that save Author does not throw error when converting Author to AuthorResponseDTO$$inlined$assertDoesNotThrow$2jdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveAuthor throws error when author exist$1jdev/oskarjohansson/domain/service/LibraryServiceTest$test that saveAuthor throws error when author exist$2Ädev/oskarjohansson/domain/service/LibraryServiceTest$test that saveAuthor throws error when author exist$$inlined$assertThrows$1adev/oskarjohansson/domain/service/LibraryServiceTest$test that getBookByIdOrTitle logical flow $1adev/oskarjohansson/domain/service/LibraryServiceTest$test that getBookByIdOrTitle logical flow $2}dev/oskarjohansson/domain/service/LibraryServiceTest$test that getBookByIdOrTitle logical flow $$inlined$assertDoesNotThrow$1}dev/oskarjohansson/domain/service/LibraryServiceTest$test that getBookByIdOrTitle logical flow $$inlined$assertDoesNotThrow$2vdev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview does not throw error when userId matches$1vdev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview does not throw error when userId matches$2vdev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview does not throw error when userId matches$3ídev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview does not throw error when userId matches$$inlined$assertDoesNotThrow$1ídev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview does not throw error when userId matches$$inlined$assertDoesNotThrow$2udev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview throws error when userId does not match$1udev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview throws error when userId does not match$2udev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview throws error when userId does not match$3ãdev/oskarjohansson/domain/service/LibraryServiceTest$test that deleteReview throws error when userId does not match$$inlined$assertThrows$1qdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview does not throw error when isUser is true$1qdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview does not throw error when isUser is true$2qdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview does not throw error when isUser is true$3çdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview does not throw error when isUser is true$$inlined$assertDoesNotThrow$1çdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview does not throw error when isUser is true$$inlined$assertDoesNotThrow$2jdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview throws error when isUser is false$1jdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview throws error when isUser is false$2jdev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview throws error when isUser is false$3Ädev/oskarjohansson/domain/service/LibraryServiceTest$test updateReview throws error when isUser is false$$inlined$assertThrows$1hdev/oskarjohansson/domain/service/LibraryServiceTest$test addAuthor throws no errors with valid inputs$1hdev/oskarjohansson/domain/service/LibraryServiceTest$test addAuthor throws no errors with valid inputs$2hdev/oskarjohansson/domain/service/LibraryServiceTest$test addAuthor throws no errors with valid inputs$3hdev/oskarjohansson/domain/service/LibraryServiceTest$test addAuthor throws no errors with valid inputs$4hdev/oskarjohansson/domain/service/LibraryServiceTest$test addAuthor throws no errors with valid inputs$5Ñdev/oskarjohansson/domain/service/LibraryServiceTest$test addAuthor throws no errors with valid inputs$$inlined$assertDoesNotThrow$1Ñdev/oskarjohansson/domain/service/LibraryServiceTest$test addAuthor throws no errors with valid inputs$$inlined$assertDoesNotThrow$21dev/oskarjohansson/domain/service/UtilitiesKtTestédev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toReviewWithReviewIdNull throws error when text is missing$$inlined$assertThrows$1êdev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toReviewWithReviewIdNull throws error when rating is missing$$inlined$assertThrows$1êdev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toReviewWithReviewIdNull throws error when bookId is missing$$inlined$assertThrows$1édev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toUpdatedReview converts correctly with valid inputs$$inlined$assertDoesNotThrow$1édev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toUpdatedReview converts correctly with valid inputs$$inlined$assertDoesNotThrow$2§dev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toUpdatedReview updates text and not rating when rating is null in request$$inlined$assertDoesNotThrow$1§dev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toUpdatedReview updates text and not rating when rating is null in request$$inlined$assertDoesNotThrow$2¢dev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toUpdatedReview updates rating and not text when text is null in request$$inlined$assertDoesNotThrow$1¢dev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toUpdatedReview updates rating and not text when text is null in request$$inlined$assertDoesNotThrow$2Ädev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toReviewResponseDTO converts correctly$$inlined$assertDoesNotThrow$1Ädev/oskarjohansson/domain/service/UtilitiesKtTest$Test that toReviewResponseDTO converts correctly$$inlined$assertDoesNotThrow$2*dev/oskarjohansson/service/UserServiceTestödev/oskarjohansson/service/UserServiceTest$Test that register user throws IllegalArgumentException when trying to register a username that already exist$1∞dev/oskarjohansson/service/UserServiceTest$Test that register user throws IllegalArgumentException when trying to register a username that already exist$$inlined$assertThrows$18dev/oskarjohansson/domain/service/LibraryUtilitiesKtTestïdev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toReviewWithReviewIdNull throws error when text is missing$$inlined$assertThrows$1ódev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toReviewWithReviewIdNull throws error when rating is missing$$inlined$assertThrows$1ódev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toReviewWithReviewIdNull throws error when bookId is missing$$inlined$assertThrows$1ïdev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toUpdatedReview converts correctly with valid inputs$$inlined$assertDoesNotThrow$1ïdev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toUpdatedReview converts correctly with valid inputs$$inlined$assertDoesNotThrow$2´dev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toUpdatedReview updates text and not rating when rating is null in request$$inlined$assertDoesNotThrow$1´dev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toUpdatedReview updates text and not rating when rating is null in request$$inlined$assertDoesNotThrow$2©dev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toUpdatedReview updates rating and not text when text is null in request$$inlined$assertDoesNotThrow$1©dev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toUpdatedReview updates rating and not text when text is null in request$$inlined$assertDoesNotThrow$2ádev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toReviewResponseDTO converts correctly$$inlined$assertDoesNotThrow$1ádev/oskarjohansson/domain/service/LibraryUtilitiesKtTest$Test that toReviewResponseDTO converts correctly$$inlined$assertDoesNotThrow$2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       